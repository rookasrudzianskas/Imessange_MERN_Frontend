{"version":3,"sources":["features/userSlice.js","features/chatSlice.js","firebase.js","Message.js","axios.js","Chat.js","SidebarChat.js","Sidebar.js","Imessage.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","chatSlice","chatId","chatName","setChat","selectChatName","chat","selectChatId","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","provider","GoogleAuthProvider","Message","forwardRef","ref","id","sender","message","timestamp","useSelector","className","email","Avatar","src","photo","Date","parseInt","toDateString","instance","axios","create","baseURL","pusher","Pusher","cluster","Chat","useState","input","setInput","messages","setMessages","getConversation","get","then","res","data","conversation","useEffect","unsubscribe","subscribe","bind","map","_id","key","value","onChange","e","target","placeholder","type","onClick","preventDefault","post","now","IconButton","SidebarChat","dispatch","useDispatch","lastMsg","setLastMsg","lastPhoto","setLastPhoto","lastTimestamp","setLastTimestamp","getSidebarElement","toUTCString","Sidebar","chats","setChats","getChats","signOut","variant","prompt","firstMsg","Imessage","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","uid","photoURL","displayName","configureStore","reducer","userReducer","chatReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a53851df.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const chatSlice = createSlice({\r\n  name: \"chat\",\r\n  initialState: {\r\n    chatId: null,\r\n    chatName: null,\r\n  },\r\n  reducers: {\r\n    setChat: (state, action) => {\r\n      state.chatId = action.payload.chatId;\r\n      state.chatName = action.payload.chatName;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setChat } = chatSlice.actions;\r\n\r\nexport const selectChatName = (state) => state.chat.chatName;\r\nexport const selectChatId = (state) => state.chat.chatId;\r\n\r\nexport default chatSlice.reducer;\r\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAQ7jLQczjbSkOqNQaG9zBNjgKu92Mk_gQ\",\n    authDomain: \"rookas-imessage-mern-app.firebaseapp.com\",\n    projectId: \"rookas-imessage-mern-app\",\n    storageBucket: \"rookas-imessage-mern-app.appspot.com\",\n    messagingSenderId: \"383445998242\",\n    appId: \"1:383445998242:web:af5f066cc90b96a11e55fb\",\n    measurementId: \"G-844MYFTZJ5\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth, provider };\nexport default db;\n\n// this is the end for today","import { Avatar } from \"@material-ui/core\";\nimport React, { forwardRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"./features/userSlice\";\nimport \"./Message.css\";\n\nconst Message = forwardRef(\n  (\n    { id, sender, message, timestamp },\n    ref\n  ) => {\n    const user = useSelector(selectUser);\n\n    return (\n      <div\n        ref={ref}\n        className={`message ${user.email === sender.email && \"message__sender\"}`}\n      >\n        <Avatar className=\"message__photo\" src={sender.photo} />\n        <p>{message}</p>\n        <small>{new Date(parseInt(timestamp)).toDateString()}</small>\n      </div>\n    );\n  }\n);\n\nexport default Message;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://rookas-imessage-mern-backend.herokuapp.com'\n})\n\nexport default instance;","import { IconButton } from \"@material-ui/core\";\nimport MicNoneIcon from \"@material-ui/icons/MicNone\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./Chat.css\";\nimport { selectChatId, selectChatName } from \"./features/chatSlice\";\nimport db from \"./firebase\";\nimport Message from \"./Message\";\nimport firebase from \"firebase\";\nimport { selectUser } from \"./features/userSlice\";\nimport FlipMove from \"react-flip-move\";\nimport axios from \"./axios\";\nimport Pusher from \"pusher-js\";\n\nconst pusher = new Pusher('117ff3ca7fcf393a58b3', {\n  cluster: 'eu'\n});\n\nfunction Chat() {\n  const user = useSelector(selectUser);\n  const [input, setInput] = useState(\"\");\n  const chatName = useSelector(selectChatName);\n  const chatId = useSelector(selectChatId);\n  const [messages, setMessages] = useState([]);\n\n  const getConversation = (chatId) => {\n    if (chatId) {\n      // this gets the messsages in the chat id\n      axios.get(`/get/conversation?id=${chatId}`).then((res) => {\n        setMessages(res.data[0].conversation);\n        // gets the messages\n      })\n    }\n  }\n\n  useEffect(() => {\n\n    pusher.unsubscribe('messages');\n\n    getConversation(chatId);\n\n    const channel = pusher.subscribe('messages');\n    channel.bind('newMessage', function (data) {\n      getConversation(chatId);\n    });\n  }, [chatId]);\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n    axios.post(`/new/message?id=${chatId}`, {\n      message: input,\n      timestamp: Date.now(),\n      user: user,\n    })\n\n    setInput(\"\");\n\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"chat__header\">\n        <h4>\n          To: <span className=\"chat__name\">{chatName}</span>\n        </h4>\n        <strong>Details</strong>\n      </div>\n\n      {/* chat messages */}\n      <div className=\"chat__messages\">\n        <FlipMove>\n          {messages.map(({ user, _id, message, timestamp}) => (\n              <Message key={_id} id={_id} sender={user} message={message} timestamp={timestamp} />\n          ))}\n        </FlipMove>\n      </div>\n\n      <div className=\"chat__input\">\n        <form>\n          <input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"iMessage\"\n            type=\"text\"\n          />\n          <button onClick={sendMessage}>Send Message</button>\n        </form>\n\n        <IconButton>\n          <MicNoneIcon className=\"chat__mic\" />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import { Avatar } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setChat } from \"./features/chatSlice\";\nimport db from \"./firebase\";\nimport \"./SidebarChat.css\";\nimport * as timeago from \"timeago.js\";\nimport axios from \"./axios\";\nimport Pusher from \"pusher-js\";\n\nconst pusher = new Pusher('117ff3ca7fcf393a58b3', {\n    cluster: 'eu'\n});\n\nfunction SidebarChat({ id, chatName }) {\n  const dispatch = useDispatch();\n  const [chatInfo, setChatInfo] = useState([]);\n  const [lastMsg, setLastMsg] = useState(\"\");\n  const [lastPhoto, setLastPhoto] = useState(\"\");\n  const [lastTimestamp, setLastTimestamp] = useState(\"\");\n\n\n  // here we get the messages to display here\n  const getSidebarElement = () => {\n      axios.get(`/get/lastMessage?id=${id}`).then((res) => {\n          setLastMsg(res.data.message);\n          setLastPhoto(res.data.user.photo);\n          setLastTimestamp(res.data.timestamp);\n      });\n  }\n\n  useEffect(() => {\n      getSidebarElement();\n\n      // real times stuff\n      const channel = pusher.subscribe('messages');\n      channel.bind('newMessage', function(data) {\n          getSidebarElement();\n      })\n\n  }, [id]);\n\n  return (\n    <div\n      onClick={() =>\n        dispatch(\n          setChat({\n            chatId: id,\n            chatName: chatName,\n          })\n        )\n      }\n      className=\"sidebarChat\"\n    >\n      <Avatar src={lastPhoto} />\n      <div className=\"sidebarChat__info\">\n        <h3>{chatName}</h3>\n        <p>{lastMsg}</p>\n        <small>\n            {new Date(parseInt(lastTimestamp)).toUTCString()}\n        </small>\n      </div>\n    </div>\n  );\n}\n\nexport default SidebarChat;\n","import { Avatar, IconButton } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Sidebar.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport RateReviewOutlinedIcon from \"@material-ui/icons/RateReviewOutlined\";\nimport SidebarChat from \"./SidebarChat\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"./features/userSlice\";\nimport db, { auth } from \"./firebase\";\nimport axios from \"./axios\";\nimport Pusher from \"pusher-js\";\n\nconst pusher = new Pusher('117ff3ca7fcf393a58b3', {\n    cluster: 'eu'\n});\n\nfunction Sidebar() {\n  const user = useSelector(selectUser);\n  const [chats, setChats] = useState([]);\n\n  const getChats = () => {\n      axios.get('/get/conversationList').then((res) => {\n          setChats(res.data);\n      })\n  }\n\n  useEffect(() => {\n\n      getChats();\n\n      const channel = pusher.subscribe('chats');\n      channel.bind('newChat', function(data) {\n          getChats();\n      });\n  }, []);\n\n  const addChat = () => {\n    const chatName = prompt(\"Please enter a chat name\");\n    // otherwise it will make the whole build super complicated\n    const firstMsg = prompt(\"Please send a welcome message\");\n\n        if(chatName && firstMsg) {\n            let chatId = '';\n\n            axios.post('/new/conversation', {\n                chatName: chatName\n            }).then((res) => {\n                // storing the id\n                chatId = res.data._id\n            }).then(() => {\n                // adding the message to the exact chat ID\n                axios.post(`/new/message?id=${chatId}`, {\n                    message: firstMsg,\n                    timestamp: Date.now(),\n                    user: user,\n                })\n            })\n        }\n  };\n\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <Avatar\n          onClick={() => auth.signOut()}\n          src={user.photo}\n          className=\"sidebar__avatar\"\n        />\n        <div className=\"sidebar__input\">\n          <SearchIcon />\n          <input placeholder=\"Search\" />\n        </div>\n\n        <IconButton variant=\"outlined\" className=\"sidebar__inputButton\">\n          <RateReviewOutlinedIcon onClick={addChat} />\n        </IconButton>\n      </div>\n\n      <div className=\"sidebar__chats\">\n        {chats.map(({ id, name, timestamp }) => (\n          <SidebarChat key={id} id={id} chatName={name} timestamp={timestamp} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport Chat from \"./Chat\";\nimport \"./Imessage.css\";\nimport Sidebar from \"./Sidebar\";\n\nfunction Imessage() {\n  return (\n    <div className=\"imessage\">\n      <Sidebar />\n      <Chat />\n    </div>\n  );\n}\n\nexport default Imessage;\n","import { Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport { auth, provider } from \"./firebase\";\nimport \"./Login.css\";\n\nfunction Login() {\n  const signIn = () => {\n    auth.signInWithPopup(provider).catch((error) => alert(error.message));\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"login__logo\">\n        <img\n          src=\"https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/a60c69b4-dbdc-49e3-b152-43bbdbfb0160/d6dy6qy-19e320f2-932f-4549-8050-2b7fb9289eda.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOiIsImlzcyI6InVybjphcHA6Iiwib2JqIjpbW3sicGF0aCI6IlwvZlwvYTYwYzY5YjQtZGJkYy00OWUzLWIxNTItNDNiYmRiZmIwMTYwXC9kNmR5NnF5LTE5ZTMyMGYyLTkzMmYtNDU0OS04MDUwLTJiN2ZiOTI4OWVkYS5wbmcifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6ZmlsZS5kb3dubG9hZCJdfQ.AQSIo8n9g9HHLZFVdCwqbDOjFg9DwZI35LCTIuLgtEw\"\n          alt=\"\"\n        />\n        <h1>iMessage</h1>\n      </div>\n\n      <Button onClick={signIn}>Sign In</Button>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport { selectUser, login, logout } from \"./features/userSlice\";\r\nimport Imessage from \"./Imessage\";\r\nimport Login from \"./Login\";\r\nimport { auth } from \"./firebase\";\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        // user is logged in\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photo: authUser.photoURL,\r\n            email: authUser.email,\r\n            displayName: authUser.displayName,\r\n          })\r\n        );\r\n      } else {\r\n        // user is logged out\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return <div className=\"app\">{user ? <Imessage /> : <Login />}</div>;\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/userSlice\";\r\nimport chatReducer from \"../features/chatSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    chat: chatReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}